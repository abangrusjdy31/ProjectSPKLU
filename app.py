# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RtZfmkchqxJo70pXo6CKdOc1ePMCwKxE
"""

# Mmebaca file untuk di load
import pandas as pd

df = pd.read_excel('/content/Coba kp.xlsx')
df.head()

# menghitung jumlah transaksi
jumlah_transaksi = df['No'].nunique()

print(f'Jumlah transaksi: {jumlah_transaksi}')

# jumlah_transaksi_per_unitup
# diurutkan dari yang terbanyak kemudian nama unitup menjadi unit dan no menjadi jumlah

jumlah_transaksi_per_unitup = df.groupby('UNITUP')['No'].nunique().reset_index()
jumlah_transaksi_per_unitup = jumlah_transaksi_per_unitup.sort_values(by='No', ascending=False)
jumlah_transaksi_per_unitup = jumlah_transaksi_per_unitup.rename(columns={'UNITUP': 'unit', 'No': 'jumlah'})
jumlah_transaksi_per_unitup

"""53563 -> a
53551 -> b
53567	-> c
53559	-> d
53555	-> e
53571	-> f
53575	-> g
"""

# Urutan bedasarkan NAMA_SPKLU di unit 53575
dfa = df[df['UNITUP'] == 53575]
spkluA = dfa.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
spkluA = spkluA.sort_values(by='No', ascending=False)
spkluA = spkluA.rename(columns={'No': 'jumlah_transaksi'})
spkluA

# Urutan bedasarkan NAMA_SPKLU di unit 53571
dfb = df[df['UNITUP'] == 53571]
spkluB = dfb.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
spkluB = spkluB.sort_values(by='No', ascending=False)
spkluB = spkluB.rename(columns={'No': 'jumlah_transaksi'})
spkluB

# Urutan bedasarkan NAMA_SPKLU di unit 53555
dfc = df[df['UNITUP'] == 53555]
spkluC = dfc.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
spkluC = spkluC.sort_values(by='No', ascending=False)
spkluC = spkluC.rename(columns={'No': 'jumlah_transaksi'})
spkluC

# Urutan bedasarkan NAMA_SPKLU di unit 53559
dfd = df[df['UNITUP'] == 53559]
spkluD = dfd.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
spkluD = spkluD.sort_values(by='No', ascending=False)
spkluD = spkluD.rename(columns={'No': 'jumlah_transaksi'})
spkluD

# Urutan bedasarkan NAMA_SPKLU di unit 53567
dfe = df[df['UNITUP'] == 53567]
spkluE = dfe.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
spkluE = spkluE.sort_values(by='No', ascending=False)
spkluE = spkluE.rename(columns={'No': 'jumlah_transaksi'})
spkluE

import matplotlib.pyplot as plt
import seaborn as sns

# Total kWh terjual dan pendapatan
total_kwh_terjual = df['PEMKWH'].sum()
total_pendapatan = df['RPKWH'].sum()

print(f'Total KWH Terjual: {total_kwh_terjual}')
print(f'Total Pendapatan: {total_pendapatan}')

# Ranking unit berdasarkan total kWh terjual dan pendapatan
ranking_unit = df.groupby('UNITUP').agg({
    'PEMKWH': 'sum',
    'RPKWH': 'sum'
}).reset_index()

ranking_unit_kwh = ranking_unit.sort_values(by='PEMKWH', ascending=False).rename(columns={'PEMKWH': 'total_kwh'})
ranking_unit_pendapatan = ranking_unit.sort_values(by='RPKWH', ascending=False).rename(columns={'RPKWH': 'total_pendapatan'})

print("\nRanking Unit Berdasarkan Total KWH Terjual :")
print(ranking_unit_kwh)

print("\nRanking Unit Berdasarkan Total Pendapatan :")
print(ranking_unit_pendapatan)

# Visualisasi Total KWh dan Pendapatan per Unit
fig, axes = plt.subplots(1, 2, figsize=(18, 6))

# Visualisasi KWh per Unit
sns.barplot(ax=axes[0], x='UNITUP', y='total_kwh', data=ranking_unit_kwh, palette='viridis')
axes[0].set_title('Total KWh Terjual per Unit')
axes[0].set_xlabel('UNITUP')
axes[0].set_ylabel('Total KWh')
axes[0].tick_params(axis='x', rotation=45)

# Visualisasi Pendapatan per Unit
sns.barplot(ax=axes[1], x='UNITUP', y='total_pendapatan', data=ranking_unit_pendapatan, palette='viridis')
axes[1].set_title('Total Pendapatan per Unit')
axes[1].set_xlabel('UNITUP')
axes[1].set_ylabel('Total Pendapatan (IDR)')
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

# Hitung total KWh terjual dan pendapatan per NAMA_SPKLU
spklu_summary = df.groupby('NAMA_SPKLU').agg({
    'PEMKWH': 'sum',
    'RPKWH': 'sum'
}).reset_index()

# Ranking NAMA_SPKLU berdasarkan total KWh terjual dan pendapatan
ranking_spklu_kwh = spklu_summary.sort_values(by='PEMKWH', ascending=False).rename(columns={'PEMKWH': 'total_kwh'})
ranking_spklu_pendapatan = spklu_summary.sort_values(by='RPKWH', ascending=False).rename(columns={'RPKWH': 'total_pendapatan'})

print("\nRanking NAMA_SPKLU Berdasarkan Total KWH Terjual:")
print(ranking_spklu_kwh)

print("\nRanking NAMA_SPKLU Berdasarkan Total Pendapatan:")
print(ranking_spklu_pendapatan)

# Visualisasi Total KWh dan Pendapatan per NAMA_SPKLU
fig, axes = plt.subplots(1, 2, figsize=(18, 6))

# Visualisasi KWh per NAMA_SPKLU
sns.barplot(ax=axes[0], x='NAMA_SPKLU', y='total_kwh', data=ranking_spklu_kwh, palette='viridis')
axes[0].set_title('Total KWh Terjual per NAMA_SPKLU')
axes[0].set_xlabel('NAMA SPKLU')
axes[0].set_ylabel('Total KWh')
axes[0].tick_params(axis='x', rotation=90)

# Visualisasi Pendapatan per NAMA_SPKLU
sns.barplot(ax=axes[1], x='NAMA_SPKLU', y='total_pendapatan', data=ranking_spklu_pendapatan, palette='viridis')
axes[1].set_title('Total Pendapatan per NAMA_SPKLU')
axes[1].set_xlabel('NAMA SPKLU')
axes[1].set_ylabel('Total Pendapatan (IDR)')
axes[1].tick_params(axis='x', rotation=90)

plt.tight_layout()
plt.show()

# Proporsi Energi dan Pendapatan per Unit (Pie Chart)
fig, axes = plt.subplots(1, 2, figsize=(16, 8))

# Pie Chart Proporsi KWh per Unit
axes[0].pie(ranking_unit_kwh['total_kwh'], labels=ranking_unit_kwh['UNITUP'], autopct='%1.1f%%', startangle=90, colors=sns.color_palette('viridis', len(ranking_unit_kwh)))
axes[0].set_title('Proporsi Total KWh per Unit')
axes[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

# Pie Chart Proporsi Pendapatan per Unit
axes[1].pie(ranking_unit_pendapatan['total_pendapatan'], labels=ranking_unit_pendapatan['UNITUP'], autopct='%1.1f%%', startangle=90, colors=sns.color_palette('viridis', len(ranking_unit_pendapatan)))
axes[1].set_title('Proporsi Total Pendapatan per Unit')
axes[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.tight_layout()
plt.show()

# Tren harian/laporan bulanan dari SPKLU
# Line chart: total transaksi per hari

# 5. Analisis Tanggal Pembayaran (TGL BAYAR) - Tren Harian/Bulanan
# Konversi kolom TGL BAYAR ke tipe datetime
df['TGL BAYAR'] = pd.to_datetime(df['TGL BAYAR'], format='%d/%m/%Y', dayfirst=True)

# Ekstrak tanggal dari TGL BAYAR untuk tren harian
df['Tanggal'] = df['TGL BAYAR'].dt.date

# Hitung jumlah transaksi per hari
transaksi_per_hari = df.groupby('Tanggal')['No'].nunique().reset_index()
transaksi_per_hari = transaksi_per_hari.rename(columns={'No': 'jumlah_transaksi'})
transaksi_per_hari['Tanggal'] = pd.to_datetime(transaksi_per_hari['Tanggal'])
transaksi_per_hari = transaksi_per_hari.sort_values(by='Tanggal')

# Visualisasi Tren Harian (Line Chart)
plt.figure(figsize=(15, 6))
sns.lineplot(x='Tanggal', y='jumlah_transaksi', data=transaksi_per_hari)
plt.title('Tren Harian Total Transaksi SPKLU')
plt.xlabel('Tanggal Pembayaran')
plt.ylabel('Jumlah Transaksi')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

from statsmodels.tsa.arima.model import ARIMA
import warnings
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Mengabaikan warnings
warnings.filterwarnings("ignore")

# --- Code to generate transaksi_per_hari (copied from cell JSlBjwJEWtWd) ---
# Assuming 'df' is already loaded from a previous cell
# Konversi kolom TGL BAYAR ke tipe datetime
df['TGL BAYAR'] = pd.to_datetime(df['TGL BAYAR'], format='%d/%m/%Y', dayfirst=True, errors='coerce')

# Filter out rows where TGL BAYAR is NaT due to conversion errors
df_valid_dates = df.dropna(subset=['TGL BAYAR'])

if not df_valid_dates.empty:
    # Ekstrak tanggal dari TGL BAYAR untuk tren harian
    df_valid_dates['Tanggal'] = df_valid_dates['TGL BAYAR'].dt.date

    # Hitung jumlah transaksi per hari
    transaksi_per_hari = df_valid_dates.groupby('Tanggal')['No'].nunique().reset_index()
    transaksi_per_hari = transaksi_per_hari.rename(columns={'No': 'jumlah_transaksi'})
    transaksi_per_hari['Tanggal'] = pd.to_datetime(transaksi_per_hari['Tanggal'])
    transaksi_per_hari = transaksi_per_hari.sort_values(by='Tanggal')

    # Visualisasi Tren Harian (Line Chart) - Optional to show here, but keeping for completeness if needed
    # plt.figure(figsize=(15, 6))
    # sns.lineplot(x='Tanggal', y='jumlah_transaksi', data=transaksi_per_hari)
    # plt.title('Tren Harian Total Transaksi SPKLU')
    # plt.xlabel('Tanggal Pembayaran')
    # plt.ylabel('Jumlah Transaksi')
    # plt.xticks(rotation=45)
    # plt.tight_layout()
    # plt.show()
else:
    print("Tidak ada data tanggal pembayaran yang valid untuk analisis tren.")
    transaksi_per_hari = pd.DataFrame(columns=['Tanggal', 'jumlah_transaksi']) # Create empty DataFrame if no valid dates
# --- End of code to generate transaksi_per_hari ---


# Menggunakan data transaksi_per_hari untuk prediksi
# Model ARIMA membutuhkan data dalam format Series dengan index waktu
if not transaksi_per_hari.empty and len(transaksi_per_hari) >= 2: # Ensure enough data points
    time_series_data = transaksi_per_hari.set_index('Tanggal')['jumlah_transaksi']

    # Memilih order (p, d, q) untuk model ARIMA.
    # Order (5,1,0) adalah contoh yang umum, mungkin perlu disesuaikan berdasarkan ACF/PACF plot
    # atau menggunakan teknik pemilihan model otomatis.
    # Given the limited data, a simpler model might be more appropriate, but sticking to the original (5,1,0) for now.
    p, d, q = 5, 1, 0

    try:
        # Melatih model ARIMA
        model = ARIMA(time_series_data, order=(p, d, q))
        model_fit = model.fit()

        # Menentukan berapa hari ke depan yang ingin diprediksi
        days_to_predict = 7

        # Membuat prediksi untuk beberapa hari ke depan
        # Use the index of the last date in the historical data to predict forward
        last_date = time_series_data.index[-1]
        forecast_index = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=days_to_predict, freq='D')
        forecast = model_fit.predict(start=len(time_series_data), end=len(time_series_data) + days_to_predict - 1)
        forecast.index = forecast_index


        print(f"\nPrediksi Jumlah Transaksi untuk {days_to_predict} Hari ke Depan:")
        print(forecast)

        # Visualisasi data historis dan prediksi
        plt.figure(figsize=(15, 6))
        plt.plot(time_series_data.index, time_series_data.values, label='Data Historis')
        plt.plot(forecast.index, forecast.values, label='Prediksi', color='red')
        plt.title(f'Tren Harian Total Transaksi SPKLU dengan Prediksi ({days_to_predict} Hari ke Depan)')
        plt.xlabel('Tanggal')
        plt.ylabel('Jumlah Transaksi')
        plt.xticks(rotation=45)
        plt.legend()
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"An error occurred during ARIMA model fitting or forecasting: {e}")
        print("It's possible the data is not suitable for this ARIMA order or there isn't enough data points.")

else:
    print("Not enough valid daily transaction data available to perform ARIMA forecasting.")

# 📦 SPKLU Streamlit Dashboard Final

streamlit_code = '''
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import base64
from statsmodels.tsa.arima.model import ARIMA
from streamlit_option_menu import option_menu

# Optional: use wide layout
st.set_page_config(layout="wide")
warnings.filterwarnings("ignore")

# Sidebar navigation
from streamlit_option_menu import option_menu
import base64

# Fungsi konversi gambar ke base64
def get_base64_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded = base64.b64encode(image_file.read()).decode()
    return encoded

# Ambil gambar logo dan ubah ke base64
logo_base64 = get_base64_image("/content/logo spklu.png")



# Sidebar
with st.sidebar:
    # Tampilkan logo dan teks berdampingan
    st.markdown(
        f"""
        <div style="display: flex; align-items: center; margin-bottom: 20px;">
            <img src="data:image/png;base64,{logo_base64}" width="500" style="margin-right:20px;" />
            <h4 style="margin: 0;">SPKLU Dashboard</h4>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Menu Navigasi
    selected = option_menu(
        menu_title="",
        options=["Menu Utama", "Analisis", "Prediksi", "Tentang"],
        icons=["bar-chart", "activity", "graph-up", "info-circle"],
        menu_icon="cast",
        default_index=0,
        styles = {
    "container": {
        "padding": "5!important",
        "background-color": "#D6EBFF",  # Soft blue sidebar background
    },
    "icon": {
        "color": "#007ACC",  # PLN blue for icons
        "font-size": "18px"
    },
    "nav-link": {
        "font-size": "16px",
        "text-align": "left",
        "color": "#444444",  # Neutral gray text
        "margin": "4px",
        "border-radius": "8px"
    },
    "nav-link-selected": {
        "background-color": "#B3D9FF",  # Lighter blue for selected
        "color": "#003366",  # Darker navy text
        "font-weight": "bold"
    }
}

    )


# Load file
try:
    df = pd.read_excel('/content/Coba kp.xlsx')
    df['TGL BAYAR'] = pd.to_datetime(df['TGL BAYAR'], format='%d/%m/%Y', errors='coerce')
    df['Efisiensi'] = df['RPKWH'] / df['PEMKWH']
except Exception as e:
    st.error(f"Gagal memuat file: {e}")
    st.stop()

if selected == "Menu Utama":
    st.title('📊 Dashboard Ringkasan SPKLU')
    st.write("Ringkasan data transaksi SPKLU.")

    # 1. Format kolom tanggal dan buat kolom bulan
    df['TANGGAL'] = pd.to_datetime(df['TGL BAYAR'])
    df['BULAN'] = df['TANGGAL'].dt.to_period('M').dt.to_timestamp()

    # 2. Ambil daftar bulan unik & urutkan dari terbaru ke terlama
    daftar_bulan = df[['BULAN']].drop_duplicates().sort_values(by='BULAN', ascending=False)
    daftar_bulan_display = daftar_bulan['BULAN'].dt.strftime('%B %Y').tolist()
    pilihan_display = ["Semua Bulan"] + daftar_bulan_display

    # 3. Dropdown filter bulan
    pilihan_bulan_display = st.selectbox("Pilih Bulan", pilihan_display)

    if pilihan_bulan_display != "Semua Bulan":
        bulan_terpilih = pd.to_datetime(pilihan_bulan_display)
        df_filter = df[df['BULAN'] == bulan_terpilih]
    else:
        df_filter = df.copy()

    # -------------------------
    # 4. Pratinjau Data
    st.subheader("Pratinjau Data")
    st.dataframe(df_filter.head())

    # -------------------------
    # 5. Ringkasan Statistik
    total_kwh = df_filter['PEMKWH'].sum()
    total_income = df_filter['RPKWH'].sum()
    total_transaksi = df_filter['No'].nunique()

    st.subheader("Ringkasan Statistik")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total KWH Terjual", f"{total_kwh:,.2f}")
    with col2:
        st.metric("Total Pendapatan", f"Rp{total_income:,.2f}")
    with col3:
        st.metric("Jumlah Transaksi", total_transaksi)

    # -------------------------
    # 6. Visualisasi Bar KWH dan Pendapatan
    st.subheader("Total KWH dan Pendapatan per Unit")
    ranking_unit = df_filter.groupby('UNITUP').agg({'PEMKWH': 'sum', 'RPKWH': 'sum'}).reset_index()

    fig, axes = plt.subplots(1, 2, figsize=(18, 6))
    sns.barplot(ax=axes[0], x='UNITUP', y='PEMKWH', data=ranking_unit, palette='viridis')
    axes[0].set_title('Total KWH per Unit')
    axes[0].set_xlabel('UNITUP')
    axes[0].set_ylabel('Total KWH')
    axes[0].tick_params(axis='x', rotation=45)

    sns.barplot(ax=axes[1], x='UNITUP', y='RPKWH', data=ranking_unit, palette='viridis')
    axes[1].set_title('Total Pendapatan per Unit')
    axes[1].set_xlabel('UNITUP')
    axes[1].set_ylabel('Total Pendapatan (IDR)')
    axes[1].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)




elif selected == "Analisis":
    st.title('🔍 Analisis Detail Data SPKLU')
    st.write("Analisis mendalam berdasarkan unit dan SPKLU.")

    # Analisis per UNITUP yang spesifik
    st.subheader('Analisis Transaksi per SPKLU dalam Unit Tertentu')
    selected_unit_analysis = st.selectbox('Pilih UNITUP untuk Analisis Detail', df['UNITUP'].unique())

    if selected_unit_analysis:
        df_unit_analysis = df[df['UNITUP'] == selected_unit_analysis]
        spklu_unit_analysis = df_unit_analysis.groupby('NAMA_SPKLU')['No'].nunique().reset_index()
        spklu_unit_analysis = spklu_unit_analysis.sort_values(by='No', ascending=False).rename(columns={'No': 'jumlah_transaksi'})
        st.write(f'Jumlah Transaksi per SPKLU di UNITUP {selected_unit_analysis}:')
        st.dataframe(spklu_unit_analysis)

        # Visualisasi transaksi per SPKLU di unit yang dipilih
        fig, ax = plt.subplots(figsize=(12, 7))
        sns.barplot(x='NAMA_SPKLU', y='jumlah_transaksi', data=spklu_unit_analysis, ax=ax, palette='viridis')
        ax.set_title(f'Jumlah Transaksi per SPKLU di UNITUP {selected_unit_analysis}')
        ax.set_xlabel('NAMA SPKLU')
        ax.set_ylabel('Jumlah Transaksi')
        plt.xticks(rotation=90)
        plt.tight_layout()
        st.pyplot(fig)
        plt.close(fig)

    st.subheader('Ranking SPKLU Berdasarkan Total KWH dan Pendapatan')
    spklu_summary = df.groupby('NAMA_SPKLU').agg({
        'PEMKWH': 'sum',
        'RPKWH': 'sum'
    }).reset_index()

    ranking_spklu_kwh = spklu_summary.sort_values(by='PEMKWH', ascending=False).rename(columns={'PEMKWH': 'total_kwh'})
    ranking_spklu_pendapatan = spklu_summary.sort_values(by='RPKWH', ascending=False).rename(columns={'RPKWH': 'total_pendapatan'})

    col1_rank, col2_rank = st.columns(2)
    with col1_rank:
        st.write("Ranking NAMA_SPKLU Berdasarkan Total KWH Terjual:")
        st.dataframe(ranking_spklu_kwh)
    with col2_rank:
        st.write("Ranking NAMA_SPKLU Berdasarkan Total Pendapatan:")
        st.dataframe(ranking_spklu_pendapatan)

    st.subheader('Visualisasi Total KWH dan Pendapatan per SPKLU')
    ranking_unit = df.groupby('UNITUP').agg({'PEMKWH': 'sum', 'RPKWH': 'sum'}).reset_index()
    fig, axes = plt.subplots(1, 2, figsize=(18, 6))

    sns.barplot(ax=axes[0], x='NAMA_SPKLU', y='total_kwh', data=ranking_spklu_kwh, palette='viridis')
    axes[0].set_title('Total KWH Terjual per NAMA_SPKLU')
    axes[0].set_xlabel('NAMA SPKLU')
    axes[0].set_ylabel('Total KWH')
    axes[0].tick_params(axis='x', rotation=90)

    sns.barplot(ax=axes[1], x='NAMA_SPKLU', y='total_pendapatan', data=ranking_spklu_pendapatan, palette='viridis')
    axes[1].set_title('Total Pendapatan per NAMA_SPKLU')
    axes[1].set_xlabel('NAMA SPKLU')
    axes[1].set_ylabel('Total Pendapatan (IDR)')
    axes[1].tick_params(axis='x', rotation=90)

    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)

    st.subheader('Proporsi KWH dan Pendapatan per Unit')
    ranking_unit = df.groupby('UNITUP').agg({'PEMKWH': 'sum', 'RPKWH': 'sum'}).reset_index()
    fig, axes = plt.subplots(1, 2, figsize=(16, 8))

    axes[0].pie(ranking_unit['PEMKWH'], labels=ranking_unit['UNITUP'], autopct='%1.1f%%', startangle=90, colors=sns.color_palette('viridis', len(ranking_unit)))
    axes[0].set_title('Proporsi Total KWH per Unit')
    axes[0].axis('equal')

    axes[1].pie(ranking_unit['RPKWH'], labels=ranking_unit['UNITUP'], autopct='%1.1f%%', startangle=90, colors=sns.color_palette('viridis', len(ranking_unit)))
    axes[1].set_title('Proporsi Total Pendapatan per Unit')
    axes[1].axis('equal')

    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)





elif selected == "Prediksi":
    st.title('Prediksi Jumlah Transaksi Harian SPKLU')
    st.write("Memprediksi jumlah transaksi SPKLU untuk beberapa hari ke depan menggunakan model ARIMA.")

    df_valid_dates = df.dropna(subset=['TGL BAYAR'])

    if not df_valid_dates.empty:
        df_valid_dates['Tanggal'] = df_valid_dates['TGL BAYAR'].dt.date
        transaksi_per_hari = df_valid_dates.groupby('Tanggal')['No'].nunique().reset_index()
        transaksi_per_hari = transaksi_per_hari.rename(columns={'No': 'jumlah_transaksi'})
        transaksi_per_hari['Tanggal'] = pd.to_datetime(transaksi_per_hari['Tanggal'])
        transaksi_per_hari = transaksi_per_hari.sort_values(by='Tanggal')

        st.subheader('Tren Harian Total Transaksi SPKLU (Data Historis)')
        fig, ax = plt.subplots(figsize=(15, 6))
        sns.lineplot(x='Tanggal', y='jumlah_transaksi', data=transaksi_per_hari, ax=ax)
        ax.set_title('Tren Harian Total Transaksi SPKLU')
        ax.set_xlabel('Tanggal Pembayaran')
        ax.set_ylabel('Jumlah Transaksi')
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
        plt.close(fig)


        st.subheader('Prediksi Jumlah Transaksi Harian')

        if len(transaksi_per_hari) >= 2:
            time_series_data = transaksi_per_hari.set_index('Tanggal')['jumlah_transaksi']

            p, d, q = 5, 1, 0
            days_to_predict = st.slider('Pilih jumlah hari ke depan untuk diprediksi', 1, 30, 7)

            try:
                model = ARIMA(time_series_data, order=(p, d, q))
                model_fit = model.fit()

                last_date = time_series_data.index[-1]
                forecast_index = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=days_to_predict, freq='D')
                forecast = model_fit.predict(start=len(time_series_data), end=len(time_series_data) + days_to_predict - 1)
                forecast.index = forecast_index

                st.write(f"Prediksi Jumlah Transaksi untuk {days_to_predict} Hari ke Depan:")
                st.dataframe(forecast.reset_index().rename(columns={'index': 'Tanggal', 'predicted_mean': 'Jumlah Prediksi'}))

                fig, ax = plt.subplots(figsize=(15, 6))
                ax.plot(time_series_data.index, time_series_data.values, label='Data Historis')
                ax.plot(forecast.index, forecast.values, label='Prediksi', color='red')
                ax.set_title(f'Tren Harian Total Transaksi SPKLU dengan Prediksi ({days_to_predict} Hari ke Depan)')
                ax.set_xlabel('Tanggal')
                ax.set_ylabel('Jumlah Transaksi')
                plt.xticks(rotation=45)
                ax.legend()
                plt.tight_layout()
                st.pyplot(fig)
                plt.close(fig)

            except Exception as e:
                st.error(f"Terjadi kesalahan saat fitting atau forecasting model ARIMA: {e}")
                st.warning("Kemungkinan data tidak cocok untuk order ARIMA ini atau jumlah data terlalu sedikit.")

        else:
            st.warning("Data transaksi harian yang valid tidak cukup untuk melakukan prediksi (dibutuhkan minimal 2 data point).")

    else:
        st.warning("Tidak ada data tanggal pembayaran yang valid untuk analisis tren.")

elif selected == "Tentang":
    st.title('Tentang Dashboard Ini')
    st.write("""
    Dashboard ini dibuat untuk menganalisis data transaksi SPKLU secara interaktif dan informatif.

    ### 🔌 Apa itu SPKLU?
    SPKLU (Stasiun Pengisian Kendaraan Listrik Umum) adalah fasilitas yang disediakan untuk mengisi daya baterai kendaraan listrik. SPKLU menjadi bagian penting dalam ekosistem kendaraan listrik di Indonesia untuk mendukung transisi menuju energi bersih dan berkelanjutan.

    ### Fitur dalam Dashboard:
    """)

    # Fitur 1: Data Awal
    with st.expander("Data Awal"):
        st.write("Menampilkan cuplikan awal data transaksi SPKLU yang digunakan dalam analisis.")

    # Fitur 2: Ringkasan Data
    with st.expander("Ringkasan Data"):
        st.write("Memberikan informasi jumlah total transaksi dalam dataset.")

    # Fitur 3: Transaksi per Unit
    with st.expander("Transaksi per Unit"):
        st.write("Menampilkan jumlah transaksi yang terjadi di setiap unit pelayanan PLN (UNITUP).")

    # Fitur 4: Analisis per Unit
    with st.expander("Analisis per Unit"):
        st.write("Menampilkan transaksi per SPKLU pada unit tertentu yang dipilih, lengkap dengan grafik batang (bar chart).")

    # Fitur 5: KWH & Pendapatan
    with st.expander("KWH & Pendapatan"):
        st.write("Menunjukkan total energi (kWh) yang terjual serta pendapatan yang dihasilkan dari seluruh transaksi.")

    # Fitur 6: Ranking Unit
    with st.expander("Ranking Unit"):
        st.write("Mengurutkan UNITUP berdasarkan total energi terjual dan pendapatan terbesar.")

    # Fitur 7: Ranking SPKLU
    with st.expander("Ranking SPKLU"):
        st.write("Menyediakan daftar SPKLU berdasarkan performa (total kWh terjual dan total pendapatan).")

    # Fitur 8: Proporsi Pie Chart
    with st.expander("Proporsi Pie Chart"):
        st.write("Visualisasi pie chart untuk menunjukkan proporsi energi terjual dan pendapatan di masing-masing UNITUP.")

    # Fitur 9: Tren Transaksi & Prediksi
    with st.expander("Tren Transaksi & Prediksi"):
        st.write("Menampilkan tren harian jumlah transaksi dalam bentuk grafik garis. Fitur ini juga menggunakan **model ARIMA** untuk memprediksi jumlah transaksi di masa depan berdasarkan pola historis.")

    st.write("""
    ### 📁 Sumber Data:
    Data berasal dari file Excel: Rincian SPKLU Bulan Juni 2025
    """)

'''
# Tulis ke file app.py
with open("app.py", "w") as f:
    f.write(streamlit_code)

!pip install streamlit pandas matplotlib seaborn openpyxl
  !pip install streamlit-option-menu

import threading
import subprocess
import time

def run_streamlit():
    subprocess.call(["streamlit", "run", "app.py"])

thread = threading.Thread(target=run_streamlit)
thread.start()

time.sleep(5)  # Tunggu beberapa detik sebelum tunnel aktif

!ngrok authtoken <your_authtoken>

!pip install pyngrok

from pyngrok import ngrok

ngrok.set_auth_token("2zfw3ThlTMp1bDqtp3haRHsfQq7_3u8ZGirSXRH2LXdSSmtEk")

# Instead of using 'port' as a keyword argument, specify the address directly:
public_url = ngrok.connect("http://localhost:8501")
# or
# public_url = ngrok.connect(8501, proto="http")

print("🔗 Klik link berikut untuk membuka Streamlit:")
print(public_url)

!pkill ngrok

!pip install pyngrok

!streamlit run stream_code.py & npx localtunnel --port 8501

# prompt: ERR_NGROK_8012
# Message

# Ensure pyngrok is installed
!pip install pyngrok

# Authenticate ngrok (replace with your actual authtoken)
# You can get your authtoken from https://dashboard.ngrok.com/auth/your-authtoken
!ngrok authtoken 2x75j7q1MMWPnIdwbLKEw965L8o_3tkGqYrFM9aQbyiF2ZQjv

# Kill any previous ngrok instances to avoid port conflicts
!pkill ngrok

import threading
import subprocess
import time
from pyngrok import ngrok
import os

# Function to run Streamlit in the background
def run_streamlit():
    # Construct the full path to the streamlit command
    # This might vary depending on your Colab environment, but often it's in /usr/local/bin
    streamlit_path = "/usr/local/bin/streamlit"
    if not os.path.exists(streamlit_path):
        # Fallback if the standard path doesn't work
        streamlit_path = "streamlit"
        print(f"Warning: {streamlit_path} not found in /usr/local/bin. Trying just 'streamlit'.")

    # Use subprocess.Popen to run Streamlit non-blocking
    try:
        # Make sure app.py exists
        if not os.path.exists("app.py"):
             print("Error: app.py not found. Cannot start Streamlit.")
             return

        process = subprocess.Popen([streamlit_path, "run", "app.py"])
        # Optionally store the process ID
        print(f"Streamlit process started with PID: {process.pid}")
    except FileNotFoundError:
        print(f"Error: Could not find the streamlit executable. Is it installed and in the PATH?")
    except Exception as e:
        print(f"An error occurred while starting Streamlit: {e}")


# Start Streamlit in a separate thread
# It's important to start Streamlit BEFORE trying to establish the ngrok tunnel
thread = threading.Thread(target=run_streamlit)
thread.daemon = True # Allow the main thread to exit even if Streamlit thread is running
thread.start()

# Give Streamlit some time to start up (adjust if needed)
time.sleep(10)

try:
    # Establish the ngrok tunnel to the Streamlit port (default is 8501)
    # ngrok.connect returns an NgrokTunnel object
    # Specify the address directly as a string
    public_url = ngrok.connect("8501", proto="http")

    print("🔗 Klik link berikut untuk membuka Streamlit:")
    print(public_url.public_url)

except Exception as e:
    print(f"An error occurred while creating the ngrok tunnel: {e}")
    print("Please check your ngrok authtoken and ensure Streamlit started correctly.")

# Keep the cell alive indefinitely so the tunnel stays open
# You can interrupt the kernel to stop it
import time
while True:
    time.sleep(1)